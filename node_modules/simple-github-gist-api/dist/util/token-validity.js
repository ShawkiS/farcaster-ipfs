"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const constants_1 = require("../constants");
const isTokenStringValid = (token) => __awaiter(void 0, void 0, void 0, function* () {
    const rateLimitEndpoint = constants_1.default.githubRateLimit;
    return axios_1.default
        .get(rateLimitEndpoint, {
        headers: { Authorization: `token ${token}` }
    })
        .then(result => result.headers['x-oauth-scopes'].includes('gist'));
});
// check if token is valid and has gist access
const validateToken = (token) => __awaiter(void 0, void 0, void 0, function* () {
    if (!(yield isTokenStringValid(token))) {
        throw new Error('Token is invalid or it doesn\'t have gist access.');
    }
});
exports.default = validateToken;
