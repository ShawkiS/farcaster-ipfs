interface GistFileOptions {
    personalAccessToken: string;
    gistId: string;
    gistOwner: string;
    fileName: string;
    fileContent: string;
    isPublic: boolean;
    cors?: {
        addPrefix?: boolean;
        customPrefix?: (url: string) => string;
    };
}
declare class GistFile {
    private readonly personalAccessToken;
    private readonly gistId;
    private readonly gistOwner;
    private readonly fileName;
    private fileContent;
    private fileHasUpdates;
    private readonly isPublic;
    private readonly addCorsPrefix;
    private readonly customCorsPrefix?;
    get hasUpdates(): boolean;
    get name(): string;
    get content(): string;
    set hasUpdates(value: boolean);
    constructor(options: GistFileOptions);
    /**
     * Over-write the file's content with new content
     *
     * @param newContent
     */
    overwrite: (newContent: string) => void;
    /**
     * Save the gist-file
     */
    save: () => Promise<void>;
    /**
     * Fetch the latest version of the file
     */
    fetchLatest: () => Promise<void>;
    /**
     * [Private Member] Returns the latest fetch url for the file. It gets updated on commit changes.
     *
     * @param commitId
     */
    private readonly getLatestGistFileFetchUrl;
    /**
     * Returns the latest commit of the gist
     */
    private readonly getLatestGistCommit;
}
export default GistFile;
