"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const auth_config_1 = require("../util/auth-config");
const constants_1 = require("../constants");
class GistFile {
    constructor(options) {
        var _a, _b;
        this.gistOwner = '';
        this.fileHasUpdates = false;
        /**
         * Over-write the file's content with new content
         *
         * @param newContent
         */
        this.overwrite = (newContent) => {
            this.fileContent = newContent;
            this.fileHasUpdates = true;
        };
        /**
         * Save the gist-file
         */
        this.save = () => __awaiter(this, void 0, void 0, function* () {
            if (!this.hasUpdates)
                return;
            const url = `${constants_1.default.githubGists}/${this.gistId}`;
            const body = {
                public: this.isPublic,
                files: {
                    [this.fileName]: {
                        content: this.fileContent,
                    },
                },
            };
            yield axios_1.default.post(url, body, (0, auth_config_1.default)({ personalAccessToken: this.personalAccessToken }));
            this.fileHasUpdates = false;
        });
        /**
         * Fetch the latest version of the file
         */
        this.fetchLatest = () => __awaiter(this, void 0, void 0, function* () {
            const latestCommit = yield this.getLatestGistCommit();
            const url = this.getLatestGistFileFetchUrl(latestCommit);
            const response = yield axios_1.default.get(url, (0, auth_config_1.default)({ personalAccessToken: this.personalAccessToken }));
            this.fileContent = response.data;
            this.fileHasUpdates = false;
        });
        /**
         * [Private Member] Returns the latest fetch url for the file. It gets updated on commit changes.
         *
         * @param commitId
         */
        this.getLatestGistFileFetchUrl = (commitId) => {
            const { addCorsPrefix, customCorsPrefix, gistOwner, gistId } = this;
            const url = `https://gist.githubusercontent.com/${gistOwner}` +
                `/${gistId}/raw/${commitId}/${this.fileName}`;
            if (!addCorsPrefix)
                return url;
            if (customCorsPrefix != null)
                return customCorsPrefix(url);
            return constants_1.default.corsAnywhere + url;
        };
        /**
         * Returns the latest commit of the gist
         */
        this.getLatestGistCommit = () => __awaiter(this, void 0, void 0, function* () {
            const dummyParam = `dummyParam=${Math.random()}`; // So that we are not a victim of caching
            const url = `${constants_1.default.githubGists}/${this.gistId}?${dummyParam}`;
            try {
                const result = yield axios_1.default.get(url, (0, auth_config_1.default)({ personalAccessToken: this.personalAccessToken }));
                const response = result.data;
                const latestCommit = response.history[0];
                return latestCommit.version;
            }
            catch (e) {
                throw new Error('Error while fetching the latest commit.');
            }
        });
        this.personalAccessToken = options.personalAccessToken;
        this.gistId = options.gistId;
        this.gistOwner = options.gistOwner;
        this.fileName = options.fileName;
        this.fileContent = options.fileContent;
        this.isPublic = options.isPublic;
        this.fileHasUpdates = true;
        this.addCorsPrefix = Boolean((_a = options.cors) === null || _a === void 0 ? void 0 : _a.addPrefix);
        this.customCorsPrefix = (_b = options.cors) === null || _b === void 0 ? void 0 : _b.customPrefix;
    }
    // Getters
    get hasUpdates() {
        return this.fileHasUpdates;
    }
    get name() {
        return this.fileName;
    }
    get content() {
        return this.fileContent;
    }
    // Setters
    set hasUpdates(value) {
        this.fileHasUpdates = value;
    }
}
exports.default = GistFile;
