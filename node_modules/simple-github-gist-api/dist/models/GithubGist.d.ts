import GistFile from "./GistFile";
interface GithubGistOptions {
    /**
     * Head over to this link: https://github.com/settings/tokens/new?scopes=gist to create your personalAccessToken.
     * The "gist" scope is needed. Keep that token, a secret.
     */
    personalAccessToken: string;
    /**
     * A unique name to identify your app. This is used to identify which files in the gist are managed by this lib.
     * Be sure to use the same name everytime so that you are modifying same files from your previous session.
     *
     * Examples: my-chat-app, my-first-app
     *
     * Note: Do use same identifier when re-starting the application. This is the thing that will be used to identify
     * your previously stored file in the Gist. For different applications, use different identifiers, unless you want
     * to share the files in the gist among different applications.
     */
    appIdentifier: string;
    /**
     * Whether the gist should be private or public (If public, it would be accessible for reading to everyone)
     *
     * Default: undefined -> which means, Private
     */
    isPublic?: boolean;
    /**
     * CORS configuration: Not needed when using server-side.
     */
    cors?: {
        /**
         * Adds the default proxy-server prefix so that the URLs are not CORS blocked.
         *
         * For example: https://cors-anywhere.herokuapp.com/ as prefix to the Url.
         */
        addPrefix?: boolean;
        /**
         *  Gets the URL as argument. Feel free to decorate with any of your URLs and then
         *  return the decorated URL.
         */
        customPrefix?: (url: string) => string;
    };
}
declare class GithubGist {
    private readonly personalAccessToken;
    private readonly appIdentifier;
    private readonly formattedAppIdentifier;
    private gistId;
    private gistOwner;
    private gistFiles;
    private readonly isPublic;
    private readonly addCorsPrefix;
    private readonly customCorsPrefix?;
    get id(): string;
    get ownerUsername(): string;
    constructor(options: GithubGistOptions);
    /**
     * Syncs the gistInstance with Github server. Should be done only once,
     * right after instantiation of this class.
     */
    touch: () => Promise<void>;
    /**
     * Creates a file in the gist. If file already exists, it over-writes the
     * content of the file.
     *   Returns, true, if file was created.
     *   Returns, false, if existing file was updated.
     *
     * @param name
     * @param content
     */
    createFile: (name: string, content: string) => boolean;
    /**
     * Get a particular file instance. Returns null if file not found.
     *
     * @param name
     */
    getFile: (name: string) => GistFile | null;
    /**
     * Get all file instances
     */
    getFiles: () => GistFile[];
    /**
     * Returns the names of all the files in the gist.
     */
    getFileNames: () => string[];
    /**
     * Saves all the files in the gist, only if they have updates
     */
    save: () => Promise<void>;
    /**
     * [Private Member] Fetches the gist information.
     */
    private fetchGist;
    /**
     * [Private Member] Creates the gist
     */
    private createGist;
    /**
     * [Private Member] Initializes the instance with the information from server.
     * @param gist
     * @private
     */
    private initialize;
    /**
     * [Private Member] This constructs the GistFile instance
     * @param fileName
     * @param content
     */
    private constructGistFile;
}
export default GithubGist;
