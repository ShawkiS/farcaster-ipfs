import { Signer } from "@ethersproject/abstract-signer";
import { AxiosInstance } from "axios";
import { User } from "./api";
import { Provider } from "@ethersproject/providers";
import { RegistryV2 } from "./contracts/RegistryV2";
import { Overrides, ContractTransaction } from "@ethersproject/contracts";
/**
 * Registry of usernames and their corresponding owners, as well as the directory URL of each user.
 */
export interface UserRegistry extends UserRegistryReader, UserRegistryWriter {
}
export interface UserRegistryReader {
    lookupByUsername: (username: string) => Promise<User | undefined>;
    lookupByAddress: (address: string) => Promise<User | undefined>;
    getAllUsers: () => AsyncGenerator<User, void, undefined>;
    getAllUsernames: () => AsyncGenerator<string, void, undefined>;
}
export interface UserRegistryWriter {
    registerUsername: (username: string, signer: Signer, overrides?: Overrides & {
        directoryUrl?: string;
    }) => Promise<ContractTransaction>;
    updateDirectoryUrl: (newUrl: string, signer: Signer, overrides?: Overrides) => Promise<ContractTransaction>;
    transferUsernameOwnership: (newAddress: string, signer: Signer, overrides?: Overrides) => Promise<ContractTransaction>;
}
/**
 * Uses the indexers provided at guardian.farcaster.xyz to fetch details of registered Users.
 * Does not support registering new users, transferring user ownership, or editing directory URLs.
 * Improved efficiency over querying web3 directly, but not guaranteed to accurately reflect the most recent state.
 */
export declare class Web2UserRegistry implements UserRegistryReader {
    static readonly DEFAULT_HOST = "guardian.farcaster.xyz";
    readonly axiosInstance: AxiosInstance;
    constructor(axiosInstance?: AxiosInstance);
    lookupByUsername(username: string): Promise<User | undefined>;
    lookupByAddress(address: string): Promise<User | undefined>;
    getAllUsers(): AsyncGenerator<User, void, undefined>;
    getAllUsernames(): AsyncGenerator<string, void, undefined>;
}
/**
 * Reads and writes directly to the Farcaster Ethereum contract, which is the authoritative
 * source for user registrations.
 */
export declare class Web3UserRegistry implements UserRegistry {
    static readonly RINKEBY_ADDRESS = "0xe3be01d99baa8db9905b33a3ca391238234b79d1";
    private static readonly _REGISTRY_CREATED_BLOCK_NUMBER;
    readonly contract: Promise<RegistryV2>;
    readonly provider: Provider;
    constructor(provider: Provider);
    lookupByUsername(username: string): Promise<User | undefined>;
    lookupByAddress(address: string): Promise<User | undefined>;
    getAllUsers(): AsyncGenerator<User, void, undefined>;
    getAllUsernames(): AsyncGenerator<string, void, undefined>;
    transferUsernameOwnership(newAddress: string, signer: Signer, overrides?: Overrides): Promise<ContractTransaction>;
    updateDirectoryUrl(newUrl: string, signer: Signer, overrides?: Overrides): Promise<ContractTransaction>;
    registerUsername(username: string, signer: Signer, overrides?: Overrides & {
        directoryUrl?: string;
    }): Promise<ContractTransaction>;
    getCurrentOwner(username: string): Promise<string | undefined>;
    private _fetchUsernameRegisteredAndTransferredEvents;
    private _fetchUserCreatedAndModified;
    private _blockWhenContractCreated;
}
export declare function defaultDirectoryUrl(ownerAddress: string): string;
