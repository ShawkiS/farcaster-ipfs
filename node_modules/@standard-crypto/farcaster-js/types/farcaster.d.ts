import { Signer } from "@ethersproject/abstract-signer";
import { AxiosInstance } from "axios";
import { ContentHost, SignedCast } from "./contentHost";
import { AddressActivity, AddressActivityBody, Directory, DirectoryBody, TokenCommunity } from "./api";
import { UserRegistryReader } from "./userRegistry";
export declare const CAST_CHARACTER_LIMIT = 280;
export interface CastRequest {
    text: string;
    fromUsername: string;
    sequence?: number;
    replyTo?: Pick<AddressActivity, "merkleRoot"> | string;
    tokenCommunities?: TokenCommunity[];
}
export declare type UpdateDirectoryRequest = Omit<Partial<DirectoryBody>, "timestamp" | "version">;
/**
 * High-level functionality for interacting with Farcaster
 */
export declare class Farcaster {
    readonly usernameRegistry: UserRegistryReader;
    readonly axiosInstance: AxiosInstance;
    constructor(usernameRegistry?: UserRegistryReader, axiosInstance?: AxiosInstance);
    /**
     * Signs and publishes the provided updates to the user's {@link Directory}
     */
    updateDirectory(username: string, signer: Signer, contentHost: ContentHost, updates: UpdateDirectoryRequest): Promise<Directory>;
    /**
     * Signs a directory body.
     * @see {@link Farcaster.updateDirectory}
     */
    static signDirectory(directoryBody: DirectoryBody, signer: Signer): Promise<Directory>;
    /**
     * Validates a {@link CastRequest} and marshals it to an unsigned {@link AddressActivityBody}
     */
    prepareCast(request: CastRequest): Promise<AddressActivityBody>;
    /** Signs a cast. @see {@link ContentHost.publishCast} for publishing signed casts */
    static signCast(cast: AddressActivityBody, signer: Signer): Promise<SignedCast>;
    /** Validates {@link Directory.signature} and {@link Directory.merkleRoot} */
    static isValidDirectorySignature(address: string, directory: Directory): Promise<boolean>;
    /** Validates {@link AddressActivity.signature} and {@link AddressActivity.merkleRoot} */
    static isValidAddressActivitySignature(address: string, addressActivity: AddressActivity | SignedCast): Promise<boolean>;
    /** Returns the most recent {@link AddressActivity} published by the given username, if any */
    getLatestActivityForUser(username: string): Promise<AddressActivity | undefined>;
    /**
     * Yields all {@link AddressActivity} from the given username, in order from most to least recent.
     */
    getAllActivityForUser(username: string, pageSize?: number): AsyncGenerator<AddressActivity, void, undefined>;
    /** Fetches a user's {@link Directory} */
    getDirectory(username: string): Promise<Directory>;
}
