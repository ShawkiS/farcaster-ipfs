{"version":3,"file":"index.modern.js","sources":["../src/util.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/SignerAlgorithm.ts","../src/blockchains/utils/ripemd160.ts","../src/blockchains/bip122.ts","../src/blockchains/cosmos.ts","../src/blockchains/index.ts","../src/VerifierAlgorithm.ts","../src/JWT.ts","../src/JWE.ts","../src/ECDH.ts","../src/xc20pEncryption.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\nimport { bases } from 'multiformats/basics'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number | null\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\nexport function bytesToMultibase(b: Uint8Array, base: keyof typeof bases): string {\n  return bases[base].encode(b)\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = <number>recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam?: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","import { hash } from '@stablelib/sha256'\nimport * as u8a from 'uint8arrays'\nimport sha3 from 'js-sha3'\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(sha3.keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(\n  secret: Uint8Array,\n  keyLen: number,\n  alg: string,\n  producerInfo?: Uint8Array,\n  consumerInfo?: Uint8Array\n): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), // apu\n    lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), // apv\n    writeUint32BE(keyLen),\n  ])\n\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return hash(u8a.concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\nimport elliptic from 'elliptic'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: Uint8Array, recoverable = false): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: elliptic.ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: elliptic.ec.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam,\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose, hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexToBytes(hexPrivateKey), true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import { hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexToBytes(hexPrivateKey))\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array`\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = secretKey\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64ToBytes(base64PrivateKey))\n}\n\nexport default NaclSigner\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('invalid_config: expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg(),\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","// https://github.com/crypto-browserify/ripemd160/blob/master/index.js\n\nconst zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14,\n  4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2,\n  10, 14, 1, 3, 8, 11, 6, 15, 13,\n]\n\nconst zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1,\n  3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5,\n  8, 7, 6, 2, 13, 14, 0, 3, 9, 11,\n]\n\nconst sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11,\n  13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5,\n  11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,\n]\n\nconst sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7,\n  15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9,\n  12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,\n]\n\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction rotl(x: number, n: number) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0\n}\n\nexport class Ripemd160 {\n  // state\n  private _a = 0x67452301\n  private _b = 0xefcdab89\n  private _c = 0x98badcfe\n  private _d = 0x10325476\n  private _e = 0xc3d2e1f0\n  private _blockOffset = 0\n  private _block: Uint8Array\n  private _blockSize: number\n  private _length = [0, 0, 0, 0]\n  private _finalized: boolean\n\n  constructor(blockSize = 64) {\n    this._block = new Uint8Array(blockSize)\n    this._blockSize = blockSize\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n    this._finalized = false\n  }\n\n  update = (data: Uint8Array): Ripemd160 => {\n    if (this._finalized) throw new Error('Digest already called')\n\n    // consume data\n    const block = this._block\n    let offset = 0\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (let i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++]\n      this._update()\n      this._blockOffset = 0\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n    // update length\n    for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry\n      carry = (this._length[j] / 0x0100000000) | 0\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry\n    }\n\n    return this\n  }\n\n  digest = (): Uint8Array => {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    const digest = this._digest()\n\n    // reset state\n    this._block.fill(0)\n    this._blockOffset = 0\n    for (let i = 0; i < 4; ++i) this._length[i] = 0\n\n    return digest\n  }\n\n  private _update = () => {\n    const words = new Array(16)\n    const temp = new DataView(this._block.buffer)\n    for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true)\n\n    let al = this._a | 0\n    let bl = this._b | 0\n    let cl = this._c | 0\n    let dl = this._d | 0\n    let el = this._e | 0\n\n    let ar = this._a | 0\n    let br = this._b | 0\n    let cr = this._c | 0\n    let dr = this._d | 0\n    let er = this._e | 0\n\n    // computation\n    for (let i = 0; i < 80; i += 1) {\n      let tl\n      let tr\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n      }\n\n      al = el\n      el = dl\n      dl = rotl(cl, 10)\n      cl = bl\n      bl = tl\n\n      ar = er\n      er = dr\n      dr = rotl(cr, 10)\n      cr = br\n      br = tr\n    }\n\n    // update state\n    const t = (this._b + cl + dr) | 0\n    this._b = (this._c + dl + er) | 0\n    this._c = (this._d + el + ar) | 0\n    this._d = (this._e + al + br) | 0\n    this._e = (this._a + bl + cr) | 0\n    this._a = t\n  }\n\n  private _digest = () => {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64)\n      this._update()\n      this._blockOffset = 0\n    }\n\n    this._block.fill(0, this._blockOffset, 56)\n    const temp = new DataView(this._block.buffer)\n    temp.setUint32(56, this._length[0], true)\n    temp.setUint32(60, this._length[1], true)\n    this._block = new Uint8Array(temp.buffer)\n    this._update()\n\n    // produce result\n    const buffer = new DataView(new Uint8Array(20).buffer)\n    buffer.setInt32(0, this._a, true)\n    buffer.setInt32(4, this._b, true)\n    buffer.setInt32(8, this._c, true)\n    buffer.setInt32(12, this._d, true)\n    buffer.setInt32(16, this._e, true)\n\n    return new Uint8Array(buffer.buffer)\n  }\n}\n","import * as u8a from 'uint8arrays'\nimport { bytesToBase58, base58ToBytes } from '../util'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nexport const publicKeyToAddress = (publicKey: string, otherAddress: string): string => {\n  // Use the same version/prefix byte as the given address.\n  const version = u8a.toString(base58ToBytes(otherAddress).slice(0, 1), 'hex')\n  const publicKeyBuffer = u8a.fromString(publicKey, 'hex')\n  const publicKeyHash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const step1 = version + u8a.toString(publicKeyHash, 'hex')\n  const step2 = sha256(u8a.fromString(step1, 'hex'))\n  const step3 = sha256(step2)\n  const checksum = u8a.toString(step3, 'hex').substring(0, 8)\n  const step4 = step1 + checksum\n  return bytesToBase58(u8a.fromString(step4, 'hex'))\n}\n","import elliptic from 'elliptic'\nimport { bech32 } from 'bech32'\nimport * as u8a from 'uint8arrays'\nimport { sha256 } from '../Digest'\nimport { Ripemd160 } from './utils/ripemd160'\n\nconst EC = elliptic.ec\n\nexport const publicKeyToAddress = (publicKey: string, prefix: string): string => {\n  const ec = new EC('secp256k1')\n  const compressedPublicKey = ec.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true)\n  const publicKeyBuffer = u8a.fromString(compressedPublicKey, 'hex')\n  const hash = new Ripemd160().update(sha256(publicKeyBuffer)).digest()\n  const words = bech32.toWords(hash)\n  return bech32.encode(prefix, words).replace(prefix, '')\n}\n","import { publicKeyToAddress as bip122 } from './bip122'\nimport { publicKeyToAddress as cosmos } from './cosmos'\nimport { toEthereumAddress } from '../Digest'\n\nexport const verifyBlockchainAccountId = (publicKey: string, blockchainAccountId: string | undefined): boolean => {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':')\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = bip122(publicKey, chain[chain.length - 1])\n        break\n      case 'cosmos':\n        chain[chain.length - 1] = cosmos(publicKey, chain[1])\n        break\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey)\n        break\n      default:\n        return false\n    }\n    return chain.join(':').toLowerCase() === blockchainAccountId.toLowerCase()\n  }\n  return false\n}\n","import type { SignatureInput } from 'elliptic'\nimport elliptic from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport type { VerificationMethod } from 'did-resolver'\nimport { bases } from 'multiformats/basics'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\nimport { verifyBlockchainAccountId } from './blockchains'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawSig: Uint8Array = base64ToBytes(signature)\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawSig.slice(0, 32))\n  const s: string = bytesToHex(rawSig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64]\n  }\n  return sigObj\n}\n\ninterface LegacyVerificationMethod extends VerificationMethod {\n  publicKeyBase64: string\n}\n\nfunction extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if ((<LegacyVerificationMethod>pk).publicKeyBase64) {\n    return base64ToBytes((<LegacyVerificationMethod>pk).publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256k1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (\n    pk.publicKeyJwk &&\n    pk.publicKeyJwk.kty === 'OKP' &&\n    pk.publicKeyJwk.crv === 'Ed25519' &&\n    pk.publicKeyJwk.x\n  ) {\n    return base64ToBytes(pk.publicKeyJwk.x)\n  } else if (pk.publicKeyMultibase) {\n    const { base16, base58btc, base64, base64url } = bases\n    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)))\n    return baseDecoder.decode(pk.publicKeyMultibase)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n  const blockchainAddressKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== 'undefined'\n  })\n\n  let signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys)\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 },\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): VerificationMethod | undefined => {\n    const hash: Uint8Array = sha256(data)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, <SignatureInput>sigObj, <number>sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex).toLowerCase()\n\n    const signer: VerificationMethod | undefined = authenticators.find((pk: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        pk.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        pk.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress || // CAIP-2\n        verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10\n      )\n    })\n\n    return signer\n  }\n\n  const signer: VerificationMethod[] = signatures\n    .map(checkSignatureAgainstSigner)\n    .filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n\n  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer = authenticators.find((pk: VerificationMethod) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  })\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519,\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","import canonicalizeData from 'canonicalize'\nimport type { DIDDocument, DIDResolutionResult, Resolvable, VerificationMethod } from 'did-resolver'\nimport SignerAlg from './SignerAlgorithm'\nimport { decodeBase64url, EcdsaSignature, encodeBase64url } from './util'\nimport VerifierAlgorithm from './VerifierAlgorithm'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport type ProofPurposeTypes =\n  | 'assertionMethod'\n  | 'authentication'\n  // | 'keyAgreement' // keyAgreement VerificationMethod should not be used for signing\n  | 'capabilityDelegation'\n  | 'capabilityInvocation'\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n  canonicalize?: boolean\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: ProofPurposeTypes\n}\n\nexport interface JWSCreationOptions {\n  canonicalize?: boolean\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  exp?: number\n  rexp?: number\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\nexport interface JWTVerified {\n  payload: Partial<JWTPayload>\n  didResolutionResult: DIDResolutionResult\n  issuer: string\n  signer: VerificationMethod\n  jwt: string\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n  ],\n  Ed25519: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018'],\n}\n\nexport const SELF_ISSUED_V2 = 'https://self-issued.me/v2'\nexport const SELF_ISSUED_V0_1 = 'https://self-issued.me'\n\ntype LegacyVerificationMethod = { publicKey?: string }\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction encodeSection(data: any, shouldCanonicalize = false): string {\n  if (shouldCanonicalize) {\n    return encodeBase64url(<string>canonicalizeData(data))\n  } else {\n    return encodeBase64url(JSON.stringify(data))\n  }\n}\n\nexport const NBF_SKEW = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`,\n    }\n  }\n  throw new Error('invalid_argument: Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\n *                                                    payload properties\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | Partial<JWTPayload>,\n  signer: Signer,\n  header: Partial<JWTHeader> = {},\n  options: JWSCreationOptions = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize)\n  const signingInput: string = [encodeSection(header, options.canonicalize), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K.\n *                                                      Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object}            header                optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or rejects with an error\n */\nexport async function createJWT(\n  payload: Partial<JWTPayload>,\n  { issuer, signer, alg, expiresIn, canonicalize }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('missing_signer: No Signer functionality has been configured')\n  if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined,\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = <number>(payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('invalid_argument: JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header, { canonicalize })\n}\n\nfunction verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\n *\n *  @example\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubKeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubKeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the did doc of the issuer of the JWT.\n *\n *  @example\n *  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n *      const did = obj.did // DID of signer\n *      const payload = obj.payload\n *      const doc = obj.doc // DID Document of signer\n *      const jwt = obj.jwt\n *      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n *      ...\n *  })\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: undefined,\n    auth: undefined,\n    audience: undefined,\n    callbackUrl: undefined,\n    skewTime: undefined,\n    proofPurpose: undefined,\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const proofPurpose: ProofPurposeTypes | undefined = Object.prototype.hasOwnProperty.call(options, 'auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n  if (!payload.iss) {\n    throw new Error('invalid_jwt: JWT iss is required')\n  }\n  let did = ''\n  if (payload.iss === SELF_ISSUED_V2) {\n    if (!payload.sub) {\n      throw new Error('invalid_jwt: JWT sub is required')\n    }\n    if (typeof payload.sub_jwk === 'undefined') {\n      did = payload.sub\n    } else {\n      did = (header.kid || '').split('#')[0]\n    }\n  } else if (payload.iss === SELF_ISSUED_V0_1) {\n    if (!payload.did) {\n      throw new Error('invalid_jwt: JWT did is required')\n    }\n    did = payload.did\n  } else {\n    did = payload.iss\n  }\n  if (!did) {\n    throw new Error(`invalid_jwt: No DID has been found in the JWT`)\n  }\n  const { didResolutionResult, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    did,\n    proofPurpose\n  )\n  const signer: VerificationMethod = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = Math.floor(Date.now() / 1000)\n  const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`invalid_jwt: JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`invalid_jwt: JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`invalid_jwt: JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error('invalid_config: JWT audience is required but your app address has not been configured')\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`invalid_config: JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { payload, didResolutionResult, issuer, signer, jwt }\n  }\n  throw new Error(\n    `invalid_signature: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`\n  )\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n *\n *  @example\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      ...\n *  })\n *\n *  @param    {String}            alg                a JWT algorithm\n *  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n *  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n *  @return   {Promise<DIDAuthenticator>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  proofPurpose?: ProofPurposeTypes\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`not_supported: No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON },\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error || didResult.didDocument == null) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(`resolver_error: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`)\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid?: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || []),\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (\n      proofPurpose.startsWith('assertion') &&\n      !Object.getOwnPropertyNames(didResult?.didDocument).includes('assertionMethod')\n    ) {\n      didResult.didDocument = { ...(<DIDDocument>didResult.didDocument) }\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<LegacyVerificationMethod>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<LegacyVerificationMethod>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null) as VerificationMethod[]\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `no_suitable_keys: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`no_suitable_keys: DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { fromString } from 'uint8arrays'\nimport { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ProtectedHeader = Record<string, any> & Partial<RecipientHeader>\n\n/**\n * The JWK representation of an ephemeral public key.\n * See https://www.rfc-editor.org/rfc/rfc7518.html#section-6\n */\ninterface EphemeralPublicKey {\n  kty?: string\n  //ECC\n  crv?: string\n  x?: string\n  y?: string\n  //RSA\n  n?: string\n  e?: string\n}\n\nexport interface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: EphemeralPublicKey\n  kid?: string\n  apv?: string\n  apu?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: ProtectedHeader, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Recipient) => Promise<Uint8Array | null>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: <string>protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag),\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader = {},\n  aad?: Uint8Array\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('invalid_argument: Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        const recipient = await encrypter.encryptCek?.(cek)\n        if (recipient) {\n          jwe?.recipients?.push(recipient)\n        }\n      }\n    }\n    return <JWE>jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc)\n    throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = fromString(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected)\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('bad_jwe: missing recipients')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('failure: Failed to decrypt')\n  return cleartext\n}\n","import { sharedKey } from '@stablelib/x25519'\n\n/**\n * A wrapper around `mySecretKey` that can compute a shared secret using `theirPublicKey`.\n * The promise should resolve to a `Uint8Array` containing the raw shared secret.\n *\n * This method is meant to be used when direct access to a secret key is impossible or not desired.\n *\n * @param theirPublicKey `Uint8Array` the other party's public key\n * @returns a `Promise` that resolves to a `Uint8Array` representing the computed shared secret\n */\nexport type ECDH = (theirPublicKey: Uint8Array) => Promise<Uint8Array>\n\n/**\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\n *\n * @throws 'invalid_argument:...' if the secret key size is wrong\n */\nexport function createX25519ECDH(mySecretKey: Uint8Array): ECDH {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519')\n  }\n  return async (theirPublicKey: Uint8Array): Promise<Uint8Array> => {\n    if (theirPublicKey.length !== 32) {\n      throw new Error('invalid_argument: incorrect publicKey key length for X25519')\n    }\n    return sharedKey(mySecretKey, theirPublicKey)\n  }\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter, ProtectedHeader } from './JWE'\nimport type { VerificationMethod, Resolvable } from 'did-resolver'\nimport { ECDH } from './ECDH'\nimport { fromString } from 'uint8arrays/from-string'\n\n/**\n * Extra parameters for JWE using authenticated encryption\n */\nexport type AuthEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.2}\n   * base64url encoded\n   */\n  apu?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.3}\n   * base64url encoded\n   */\n  apv?: string\n}\n\n/**\n * Extra parameters for JWE using anonymous encryption\n */\nexport type AnonEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n}\n\n/**\n * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\n * sender private key to encrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientPublicKey the byte array representing the recipient public key\n * @param senderSecret either a Uint8Array representing the sender secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param options {@link AuthEncryptParams} used to specify extra header parameters\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options)\n}\n\n/**\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\n *\n * @param publicKey the byte array representing the recipient public key\n * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonEncrypter(publicKey: Uint8Array, options: Partial<AnonEncryptParams> = {}): Encrypter {\n  return x25519Encrypter(publicKey, options?.kid)\n}\n\n/**\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\n * sender public key to decrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param senderPublicKey the byte array representing the sender public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthDecrypter(recipientSecret: Uint8Array | ECDH, senderPublicKey: Uint8Array): Decrypter {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey)\n}\n\n/**\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonDecrypter(recipientSecret: Uint8Array | ECDH): Decrypter {\n  return x25519Decrypter(recipientSecret)\n}\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv,\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = fromString(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader)\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader,\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array): Promise<Uint8Array | null> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n\n  let partyUInfo: Uint8Array\n  let partyVInfo: Uint8Array\n  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu)\n  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv)\n\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const zE = sharedKey(epk.secretKey, recipientPublicKey)\n\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    let zS\n    if (senderSecret instanceof Uint8Array) {\n      zS = sharedKey(senderSecret, recipientPublicKey)\n    } else {\n      zS = await senderSecret(recipientPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo)\n\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (options.kid) recipient.header.kid = options.kid\n    if (options.apu) recipient.header.apu = options.apu\n    if (options.apv) recipient.header.apv = options.apv\n\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]> {\n  const encryptersForDID = async (did: string, resolved: string[] = []): Promise<Encrypter[]> => {\n    const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n    resolved.push(did)\n    if (didResolutionMetadata?.error || didDocument == null) {\n      throw new Error(\n        `resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n      )\n    }\n    let controllerEncrypters: Encrypter[] = []\n    if (!didDocument.controller && !didDocument.keyAgreement) {\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    }\n    if (didDocument.controller) {\n      let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller]\n      controllers = controllers.filter((c) => !resolved.includes(c))\n      const encrypterPromises = controllers.map((did) =>\n        encryptersForDID(did, resolved).catch(() => {\n          return []\n        })\n      )\n      const encrypterArrays = await Promise.all(encrypterPromises)\n      controllerEncrypters = ([] as Encrypter[]).concat(...encrypterArrays)\n    }\n    const agreementKeys: VerificationMethod[] = didDocument.keyAgreement\n      ?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      ?.filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n    const pks =\n      agreementKeys?.filter((key) => {\n        // TODO: should be able to use non base58 keys too\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      }) ?? []\n    if (!pks.length && !controllerEncrypters.length)\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    return pks\n      .map((pk) => x25519Encrypter(base58ToBytes(<string>pk.publicKeyBase58), pk.id))\n      .concat(...controllerEncrypters)\n  }\n\n  const encrypterPromises = dids.map((did) => encryptersForDID(did))\n  const encrypterArrays = await Promise.all(encrypterPromises)\n  const flattenedArray = ([] as Encrypter[]).concat(...encrypterArrays)\n  return flattenedArray\n}\n\nfunction validateHeader(header?: ProtectedHeader) {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header')\n  }\n}\n\nexport function x25519Decrypter(receiverSecret: Uint8Array | ECDH): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    validateHeader(recipient?.header)\n    recipient = <Recipient>recipient\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let sharedSecret\n    if (receiverSecret instanceof Uint8Array) {\n      sharedSecret = sharedKey(receiverSecret, publicKey)\n    } else {\n      sharedSecret = await receiverSecret(publicKey)\n    }\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(<string>recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array\n): Decrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    validateHeader(recipient.header)\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let zE: Uint8Array\n    let zS: Uint8Array\n\n    if (recipientSecret instanceof Uint8Array) {\n      zE = sharedKey(recipientSecret, publicKey)\n      zS = sharedKey(recipientSecret, senderPublicKey)\n    } else {\n      zE = await recipientSecret(publicKey)\n      zS = await recipientSecret(senderPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    let producerInfo\n    let consumerInfo\n    if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n    if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n\n    const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n"],"names":["bytesToBase64url","b","u8a","toString","base64ToBytes","s","inputBase64Url","replace","fromString","base58ToBytes","bytesToBase58","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Uint8Array","set","Error","fromJose","signature","signatureBytes","length","TypeError","slice","undefined","toSealed","ciphertext","tag","concat","leftpad","data","size","repeat","sha256","payload","hash","keccak","sha3","keccak_256","arrayBuffer","toEthereumAddress","hexPublicKey","hashInput","writeUint32BE","value","array","encoded","lengthAndInput","concatKDF","secret","keyLen","alg","producerInfo","consumerInfo","roundNumber","secp256k1","elliptic","ec","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","secretKey","dataBytes","sig","NaclSigner","base64PrivateKey","instanceOfEcdsaSignature","object","ES256KSignerAlg","Ed25519SignerAlg","algorithms","ES256K","Ed25519","EdDSA","SignerAlg","impl","zl","zr","sl","sr","hl","hr","rotl","x","n","fn1","a","c","d","e","m","k","fn2","fn3","fn4","fn5","Ripemd160","constructor","blockSize","_a","_b","_c","_d","_e","_blockOffset","_block","_blockSize","_length","_finalized","update","block","offset","i","_update","j","carry","digest","_digest","fill","words","Array","temp","DataView","buffer","getInt32","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","setUint32","setInt32","publicKeyToAddress","publicKey","otherAddress","version","publicKeyBuffer","publicKeyHash","step1","step2","step3","checksum","step4","EC","prefix","compressedPublicKey","keyFromPublic","getPublic","encode","bech32","toWords","verifyBlockchainAccountId","blockchainAccountId","chain","split","bip122","cosmos","join","toSignatureObject","rawSig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","publicKeyJwk","crv","y","kty","publicKeyMultibase","base16","base58btc","base64","base64url","bases","baseDecoder","decoder","or","decode","verifyES256K","authenticators","fullPublicKeys","filter","ethereumAddress","blockchainAddressKeys","find","pubBytes","verify","err","verifyRecoverableES256K","signatures","so","checkSignatureAgainstSigner","recoveredKey","recoverPubKey","recoveredPublicKeyHex","recoveredCompressedPublicKeyHex","recoveredAddress","keyHex","map","key","verifyEd25519","clear","VerifierAlgorithm","SUPPORTED_PUBLIC_KEY_TYPES","SELF_ISSUED_V2","SELF_ISSUED_V0_1","defaultAlg","DID_JSON","encodeSection","shouldCanonicalize","canonicalizeData","JSON","stringify","NBF_SKEW","decodeJWS","jws","parts","match","header","parse","decodeJWT","jwt","decodedJwt","Object","assign","createJWS","options","encodedPayload","canonicalize","signingInput","jwtSigner","createJWT","issuer","expiresIn","typ","timestamps","iat","Math","floor","Date","now","exp","nbf","fullPayload","iss","verifyJWSDecoded","pubKeys","isArray","verifyJWS","jwsDecoded","verifyJWT","resolver","auth","audience","callbackUrl","skewTime","proofPurpose","prototype","hasOwnProperty","call","did","sub","sub_jwk","kid","didResolutionResult","resolveAuthenticator","nowSkewed","aud","audArray","matchedAudience","item","types","didResult","result","resolve","accept","getOwnPropertyNames","indexOf","didDocument","didDocumentMetadata","didResolutionMetadata","contentType","error","message","getPublicKeyById","verificationMethods","pubid","filtered","id","publicKeysToCheck","verificationMethod","includes","assertionMethod","type","supported","validateJWE","jwe","protected","iv","recipients","rec","encrypted_key","encodeJWE","protectedHeader","recipient","aad","createJWE","cleartext","encrypters","encryptionResult","encrypt","tmpEnc","enc","reduce","acc","encrypter","cek","encryptCek","push","decryptJWE","decrypter","protHeader","sealed","decrypt","createX25519ECDH","mySecretKey","theirPublicKey","sharedKey","createAuthEncrypter","recipientPublicKey","senderSecret","xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonEncrypter","x25519Encrypter","createAuthDecrypter","recipientSecret","senderPublicKey","xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonDecrypter","x25519Decrypter","xc20pEncrypter","cipher","XChaCha20Poly1305","randomBytes","nonceLength","seal","subarray","tagLength","xc20pDirEncrypter","xc20pEncrypt","encodedAad","xc20pDirDecrypter","open","epk","generateKeyPair","sharedSecret","kek","res","partyUInfo","partyVInfo","apu","apv","zE","zS","resolveX25519Encrypters","dids","encryptersForDID","resolved","controllerEncrypters","controller","keyAgreement","controllers","encrypterPromises","catch","encrypterArrays","Promise","all","agreementKeys","pks","Boolean","flattenedArray","validateHeader","receiverSecret","sealedCek"],"mappings":"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"}